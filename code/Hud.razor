@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@implements Component.INetworkListener

<root>	
	<div class="output">
		@foreach (var entry in Entries)
		{
			<div class="chat_entry">
				<div class="author">@(entry.author):</div>
				<div class="message">@entry.message</div>
			</div>
		}
	</div>
	<div class="hp">@PlayerController.Local.Health</div>
	<TextEntry @ref="InputBox" onsubmit="@ChatFinished"></TextEntry>
</root>

@code
{
	public record Entry(string author, string message, RealTimeSince timeSinceAdded); 
	private TextEntry InputBox { get; set; }
	private List<Entry> Entries { get; set; } = new(); 
	protected override void OnUpdate()
	{
		if (InputBox is not null)
		{
			Panel.AcceptsFocus = false;

			if (Input.Pressed("chat"))
			{
				InputBox.Focus();
			}

			Entries.RemoveAll(x => x.timeSinceAdded > 30f);

			SetClass("open", InputBox.HasFocus);
		}
	}

	private void ChatFinished()
	{
		var text = InputBox.Text;
		InputBox.Text = "";

		if (string.IsNullOrWhiteSpace(text))
			return;

		SendText(Sandbox.Utility.Steam.PersonaName, text);
	}

	[Broadcast]
	public void SendText(string author, string message)
	{
		AddTextLocal(author, message);
	}

	public void AddTextLocal(string author, string message)
	{
		message = message.Truncate(300);

		if (string.IsNullOrWhiteSpace(message))
			return;

		Log.Info($"{author}: {message}");

		Entries.Add(new(author, message, 0f));
		StateHasChanged();
	}

	void INetworkListener.OnConnected(Connection channel)
	{
		if (IsProxy) return;

		SendText("System", $"{channel.DisplayName} has joined the game");
	}

	void INetworkListener.OnDisconnected(Connection channel)
	{
		if (IsProxy) return;

		SendText("System", $"{channel.DisplayName} has left the game");
	}
	protected override int BuildHash() => System.HashCode.Combine( Time.Now );
}
