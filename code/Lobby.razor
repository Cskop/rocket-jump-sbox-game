﻿@using System
@using System.Collections.Generic
@using System.Text.Json.Nodes;
@using System.Linq
@using System.Threading.Tasks
@using Sandbox;
@using Sandbox.Network;
@using Sandbox.Services;
@using Sandbox.Utility;
@inherits PanelComponent

<root>
	
	<div class="center">
		<div class="leaderboard">
			<p>
				YouStat: @MyValue
			</p>
			<div class="anotherboard">
				@foreach ( var stat in players )
				{
					<p>
						@stat.DisplayName - @stat.Value
					</p>
				}
			</div>
		</div>
	</div>
		<div class="left">
			<div class="title">
				Rocket Jump
			</div>

			<div class="explanation">
				<p>
					Rocket Jump, afk: @afk
				</p>
			</div>
			<div class="update">
				Current update: "player health & afk time count & i don't forgot change this"
			</div>
			<div class="button-list">
				<div class="button" onclick=@( () => CreateServer() )>
					Create Lobby
				</div>
				<div class="button" onclick=@( () => CreateTestServer() )>
					text
				</div>
				
				<div class="button" onclick=@( () => Quit() )>
					Quit
				</div>
			</div>
		</div>

		<div class="lobby-list">
			<div class="header">
				<div class="title">Lobbies</div>
			</div>

			@if ( IsRefreshing )
			{
				<label>Refreshing the lobby list.</label>
			}
			else if ( List.Count == 0 )
			{
				<label>No lobbies were found.</label>
			}
			else
			{
				<div class="button-list">
					@foreach ( var lobby in List )
					{
						<div class="button" onclick=@( () => OpenLobby( lobby ) )>
							<div class="title">
								@lobby.Name
							</div>

							<div class="meta">
								<div class="map">
									@lobby.Map
								</div>

								<div class="count">
									@lobby.Members / @lobby.MaxMembers
								</div>
							</div>
						</div>
					}
				</div>
			}
		</div>
	</div>
</root>

@code
{
			/*
			// Assuming Scene.LoadFromFile() can directly read and interpret the saved file.
			JsonObject resource = FileSystem.Data.ReadJson<JsonObject>( "scene.json" );
			Scene.Deserialize(resource);
	*/
	private bool IsRefreshing { get; set; }
	private List<LobbyInformation> List { get; set; } = new();
	private Leaderboards.Entry[] players { get; set; } = [];
	private double afk = Stats.GetLocalPlayerStats("skop.rocket_jump_scene").Get("afk").Value;
	private int MyValue;

	protected override void OnFixedUpdate()
	{

	}

	protected override async void OnEnabled()
	{
		base.OnEnabled();
		MyValue = (int)Stats.GetLocalPlayerStats("skop.rocket_jump_scene").Get("jumps").Value;
		var board = Leaderboards.Get("jumps");
		await board.Refresh();
		players = board.Entries;
		/*
		FileSystem.Data.WriteJson<JsonObject>( $"scene{lastfile}.json", resource ); 
		FileSystem.Data.WriteJson<int>( "lastsave", lastfile+1 );
	*/
		// Log.Info(players);
		_ = RefreshLobbyList();
	}

	protected override void OnUpdate()
	{
		Sandbox.Services.Stats.Increment("afk", Time.Delta);
		afk += Time.Delta;
	}

	
	protected override int BuildHash() => HashCode.Combine( RealTime.Now );
	
	private async Task RefreshLobbyList()
	{
		while ( true )
		{
			IsRefreshing = true;
			StateHasChanged();

			List = await Networking.QueryLobbies();

			IsRefreshing = false;
			StateHasChanged();

			await Task.DelayRealtimeSeconds( 5f );
		}
	}

	private void OpenLobby( LobbyInformation lobby )
	{
		GameNetworkSystem.Connect( lobby.LobbyId );
	}

	private void CreateServer()
	{
		Game.ActiveScene.LoadFromFile("scenes/minimal.scene");
	}

	private void CreateTestServer()
	{
		Game.ActiveScene.LoadFromFile("scenes/test.scene");
	}

	private void Quit()
	{
		Game.Close();
	}
}
